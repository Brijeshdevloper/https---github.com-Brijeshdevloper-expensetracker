// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview AI-powered transaction categorization flow.
 *
 * This file defines a Genkit flow that uses a language model to automatically
 * suggest a category for a transaction based on its description.
 *
 * @module ai/flows/categorize-transaction
 *
 * @interface CategorizeTransactionInput - The input type for the categorizeTransaction function.
 * @interface CategorizeTransactionOutput - The output type for the categorizeTransaction function.
 * @function categorizeTransaction - A function that suggests a category for a transaction.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const CategorizeTransactionInputSchema = z.object({
  description: z.string().describe('The transaction description.'),
});
export type CategorizeTransactionInput = z.infer<typeof CategorizeTransactionInputSchema>;

const CategorizeTransactionOutputSchema = z.object({
  category: z.string().describe('The suggested transaction category.'),
});
export type CategorizeTransactionOutput = z.infer<typeof CategorizeTransactionOutputSchema>;

export async function categorizeTransaction(input: CategorizeTransactionInput): Promise<CategorizeTransactionOutput> {
  return categorizeTransactionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'categorizeTransactionPrompt',
  input: {
    schema: z.object({
      description: z.string().describe('The transaction description.'),
    }),
  },
  output: {
    schema: z.object({
      category: z.string().describe('The suggested transaction category.'),
    }),
  },
  prompt: `You are a personal finance expert.  Given the following transaction description, suggest the most appropriate category for it.

Description: {{{description}}}

Consider categories such as: Food, Rent, Transport, Salary, Investments, Entertainment, Utilities, etc.

Respond with ONLY the category name. Do not include any other text.`,
});

const categorizeTransactionFlow = ai.defineFlow<
  typeof CategorizeTransactionInputSchema,
  typeof CategorizeTransactionOutputSchema
>({
  name: 'categorizeTransactionFlow',
  inputSchema: CategorizeTransactionInputSchema,
  outputSchema: CategorizeTransactionOutputSchema,
},
async input => {
  const {output} = await prompt(input);
  return output!;
});
